{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lightkurve quicklook prototype "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now with the \"embed server in notebook\" functionality:  \n",
    "https://github.com/bokeh/bokeh/blob/master/examples/howto/server_embed/notebook_embed.ipynb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's make the Jupyter cells wider"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Download a Kepler target pixel file (TPF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "tpf = KeplerTargetPixelFile.from_archive('210698281', campaign=13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    from bokeh.io import show, output_notebook\n",
    "    from bokeh.plotting import figure, ColumnDataSource\n",
    "    from bokeh.models import LogColorMapper\n",
    "    from bokeh.layouts import row\n",
    "    from bokeh.models.tools import HoverTool\n",
    "    output_notebook()\n",
    "except ImportError:\n",
    "    raise ImportError('The Pixel Selector tool requires Bokeh.  See the Installation Guide.')\n",
    "\n",
    "\n",
    "lc = tpf.to_lightcurve()\n",
    "xx=tpf.column + np.arange(tpf.shape[2])\n",
    "yy=tpf.row + np.arange(tpf.shape[1])\n",
    "\n",
    "x, y = np.meshgrid(xx, yy)\n",
    "\n",
    "n_pixels = tpf.flux[0,:,:].size\n",
    "pixel_index_array = np.arange(0,n_pixels, 1, dtype=int).reshape(tpf.flux[0,:,:].shape)\n",
    "\n",
    "def modify_doc(doc):\n",
    "    source = ColumnDataSource(data=dict(\n",
    "        time=lc.time, flux=lc.flux, \n",
    "        cadence=lc.cadenceno,\n",
    "        quality=lc.quality))\n",
    "\n",
    "    title = \"Quicklook lightcurve for {} target {}\".format(tpf.mission, tpf.keplerid)\n",
    "    ymax = np.nanpercentile(tpf.to_lightcurve(aperture_mask='all').flux, 80)*1.2\n",
    "    p = figure(title=title, plot_height=300, plot_width=600, y_range=(0, ymax),\n",
    "               tools=\"tap,pan,wheel_zoom,box_zoom,reset\")#, theme=theme)\n",
    "    p.yaxis.axis_label = 'Normalized Flux'\n",
    "    p.xaxis.axis_label = 'Time - 2454833 (days)'\n",
    "    p.step('time', 'flux', line_width=1, color='gray', source=source, nonselection_line_color='gray')\n",
    "\n",
    "    r = p.circle('time', 'flux', source=source, fill_alpha=0.3, size=8,line_color=None,\n",
    "                 selection_color=\"firebrick\", nonselection_fill_alpha=0.0,\n",
    "                 nonselection_fill_color=\"grey\",nonselection_line_color=None,\n",
    "                 nonselection_line_alpha=0.0, fill_color=None, \n",
    "                 hover_fill_color=\"firebrick\",hover_alpha=0.9,hover_line_color=\"white\")\n",
    "\n",
    "\n",
    "    s2 = figure(plot_width=300, plot_height=300, title='Target Pixel File', \n",
    "                tools='tap, box_select, reset')\n",
    "    s2.yaxis.axis_label = 'Pixel Row Number'\n",
    "    s2.xaxis.axis_label = 'Pixel Column Number'\n",
    "\n",
    "    pedestal = np.nanmin(tpf.flux)\n",
    "    vlo, lo, med, hi, vhi = np.fix(np.nanpercentile(tpf.flux-pedestal, [0.2, 1, 50, 95, 99.8]))\n",
    "    color_mapper = LogColorMapper(palette=\"Viridis256\", low=lo, high=hi)\n",
    "\n",
    "    s2_dat = s2.image([pedestal+tpf.flux[0,:,:]], x=tpf.column, y=tpf.row,\n",
    "                      dw=tpf.shape[2], dh=tpf.shape[1], dilate=True,\n",
    "                      color_mapper=color_mapper)\n",
    "\n",
    "    #source2 = ColumnDataSource(data=dict(xx=x_vals+0.5, yy=y_vals+0.5))\n",
    "    source2 = ColumnDataSource(data=dict(xx=x+0.5, yy=y+0.5))\n",
    "    r1 = s2.rect('xx', 'yy', 1, 1, source=source2, fill_color='gray', fill_alpha=0.4, line_color='white')\n",
    "\n",
    "    def callback(attr, old, new):\n",
    "        if (new is None):\n",
    "            source.data = dict(time=lc.time, flux=lc.flux, \n",
    "                            cadence=lc.cadenceno, quality=lc.quality)\n",
    "        else:\n",
    "            selected_indices = np.array(source2.selected.indices)\n",
    "            selected_mask = np.isin(pixel_index_array, selected_indices)\n",
    "            lc_new = tpf.to_lightcurve(aperture_mask=selected_mask)\n",
    "            source.data = dict(time=lc.time, flux=lc_new.flux, \n",
    "                            cadence=lc.cadenceno, quality=lc.quality)\n",
    "    \n",
    "    source2.on_change('selected', callback)\n",
    "    row1 = row(p, s2)\n",
    "    doc.add_root(row1)\n",
    "\n",
    "show(modify_doc)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hmmm... it's not working!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
